name: Deploy Miniflow

on:
  issue_comment:
    types: [created]
  pull_request:
    types: [opened]
    branches:
      - master

jobs:
  build:
    if: ${{ github.event.comment.body == 'staging' || github.event_name == 'pull_request' }}
    name: Deploy the App
    runs-on: ubuntu-latest

    steps:
    - name: Auto Label Pull Request
      uses: JulienKode/team-labeler-action@v0.1.0
      with:
        repo-token: "${{ secrets.GITHUB_TOKEN }}"

    - name: Set Author PR
      if: ${{ github.event_name == 'pull_request' }}
      run: |
        echo "::set-env name=PR_AUTHOR::${{ github.actor }}"
        echo "$PR_AUTHOR"

    - name: Set Author Comment
      if: ${{ github.event_name == 'issue_comment' }}
      run: |
        echo "::set-env name=PR_AUTHOR::${{ github['event']['issue']['labels'][0]['name'] }}"
        echo "$PR_AUTHOR"

    - name: Checkout Comment
      if: ${{ github.event.comment.body == 'staging' }}
      uses: actions/checkout@v2
      with:
        ref: "refs/pull/${{ github.event.issue.number }}/merge"

    - name: Checkout PR
      if: ${{ github.event_name == 'pull_request' }}
      uses: actions/checkout@v2

    - name: Auto Label Pull Request
      uses: JulienKode/team-labeler-action@v0.1.0
      if: ${{ github.event_name == 'pull_request' }}
      with:
        repo-token: "${{ secrets.GITHUB_TOKEN }}"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Bring Up App
      run: |
        aws ecs update-service --cluster master-justin --service actions-testing-${{ github.actor }} --desired-count 1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: actions-testing
        IMAGE_TAG: ${{ github.actor }}-latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --build-arg TEST_ARG=booya --build-arg ANOTHER=boom .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition actions-testing --query taskDefinition > task-definition.json

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: actions-testing
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: actions-testing-${{ github.actor }}
        cluster: master-justin
        wait-for-service-stability: true

